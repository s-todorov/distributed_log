// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: index.proto

package index_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	IndexDocument(ctx context.Context, opts ...grpc.CallOption) (IndexService_IndexDocumentClient, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) IndexDocument(ctx context.Context, opts ...grpc.CallOption) (IndexService_IndexDocumentClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndexService_ServiceDesc.Streams[0], "/index.IndexService/IndexDocument", opts...)
	if err != nil {
		return nil, err
	}
	x := &indexServiceIndexDocumentClient{stream}
	return x, nil
}

type IndexService_IndexDocumentClient interface {
	Send(*Index) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type indexServiceIndexDocumentClient struct {
	grpc.ClientStream
}

func (x *indexServiceIndexDocumentClient) Send(m *Index) error {
	return x.ClientStream.SendMsg(m)
}

func (x *indexServiceIndexDocumentClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations must embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	IndexDocument(IndexService_IndexDocumentServer) error
	mustEmbedUnimplementedIndexServiceServer()
}

// UnimplementedIndexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) IndexDocument(IndexService_IndexDocumentServer) error {
	return status.Errorf(codes.Unimplemented, "method IndexDocument not implemented")
}
func (UnimplementedIndexServiceServer) mustEmbedUnimplementedIndexServiceServer() {}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_IndexDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndexServiceServer).IndexDocument(&indexServiceIndexDocumentServer{stream})
}

type IndexService_IndexDocumentServer interface {
	Send(*Response) error
	Recv() (*Index, error)
	grpc.ServerStream
}

type indexServiceIndexDocumentServer struct {
	grpc.ServerStream
}

func (x *indexServiceIndexDocumentServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *indexServiceIndexDocumentServer) Recv() (*Index, error) {
	m := new(Index)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "index.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IndexDocument",
			Handler:       _IndexService_IndexDocument_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "index.proto",
}
